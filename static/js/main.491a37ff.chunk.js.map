{"version":3,"sources":["logo.svg","tweets/components.js","lookup/lookup.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","TweetsComponents","props","textAreaRef","React","createRef","useState","newTweets","setNewTweets","className","onSubmit","event","preventDefault","newVal","current","value","tempNewTweets","unshift","content","likes","id","ref","name","type","TweetLists","tweetsInit","setTweetsInit","tweets","setTweets","myCallBack","response","status","console","log","alert","useEffect","final","concat","length","callback","xhr","XMLHttpRequest","responseType","open","onload","onerror","e","send","LoadTweets","map","item","index","Tweet","tweet","key","ActionBtn","action","display","actionDisplay","setLikes","userLike","setUserLike","onClick","App","src","logo","alt","href","target","rel","Boolean","window","location","hostname","match","appEl","document","getElementById","ReactDOM","render","StrictMode","twitterEl","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.491a37ff.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React,{useState,useEffect}from 'react'\r\n\r\nimport {LoadTweets} from '../lookup'\r\n\r\n\r\n\r\nexport function TweetsComponents(props){\r\n    const textAreaRef=React.createRef()\r\n    const [newTweets,setNewTweets]=useState([])\r\n    const handleSubmit=(event)=>{\r\n        event.preventDefault()\r\n        const newVal = textAreaRef.current.value\r\n        let tempNewTweets=[...newTweets]\r\n        tempNewTweets.unshift({\r\n            content:newVal,\r\n            likes:0,\r\n            id:123123\r\n        })\r\n        setNewTweets(tempNewTweets)\r\n        textAreaRef.current.value=''\r\n    }\r\n    return (\r\n        <div className={props.className}>\r\n            <div className='col-12 mb-3'>\r\n                <form onSubmit={handleSubmit}>\r\n                    <textarea ref={textAreaRef} className='form-control' name='tweet'>\r\n\r\n                    </textarea>\r\n                    <button type='submit' className='btn btn-primary my-3'>Tweet</button>\r\n                </form>\r\n            </div>\r\n            <TweetLists newTweets={newTweets}/>\r\n        </div>\r\n        \r\n    )\r\n}\r\n\r\nexport function TweetLists(props) {\r\n    const [tweetsInit, setTweetsInit] = useState([])\r\n    const [tweets,setTweets]=useState([])\r\n    const myCallBack = (response, status) => {\r\n        console.log(response, status)\r\n        if (status === 200) {\r\n            setTweetsInit(response)\r\n        } else {\r\n            alert('There was an error!')\r\n        }\r\n    }\r\n    useEffect(()=>{\r\n        const final = [...props.newTweets].concat(tweetsInit)\r\n        if(final.length!==tweets.length){\r\n            setTweets(final)\r\n        }\r\n    },[props.newTweets,tweets,tweetsInit])\r\n\r\n    useEffect(() => {\r\n        LoadTweets(myCallBack)\r\n    }, [])\r\n\r\n    return tweets.map((item, index) => {\r\n        return <Tweet tweet={item} key={`${index}-{item.id}`} className='my-5 py-5 border bg-white text-dark' />\r\n    })\r\n}\r\n\r\n\r\nexport function Tweet(props) {\r\n    const { tweet } = props\r\n    const className = props.className ? props.className : 'col-10 mx-auto col-md-6'\r\n    return (\r\n        <div className={className}>\r\n            <p>{tweet.id}-{tweet.content}</p>\r\n            <div className='btn btn-group'>\r\n                <ActionBtn tweet={tweet} action={{ type: 'likes',display:'Likes' }} />\r\n                <ActionBtn tweet={tweet} action={{ type: 'unlike',display:'UnLike' }} />\r\n                <ActionBtn tweet={tweet} action={{ type: 'retweet',display:'Retweet'}} />\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\nexport function ActionBtn(props) {\r\n    const { tweet, action } = props\r\n    const className = props.className ? props.className : \"btn btn-primary btn-sm\"\r\n    const actionDisplay=action.display?action.display :'Action'\r\n    const [likes,setLikes] =useState(tweet.likes ? tweet.likes :0)\r\n    const [userLike, setUserLike]=useState(tweet.userLike===true?true:false)\r\n    const handleClick=(event)=>{\r\n        event.preventDefault()\r\n        if(action.type==='likes'){\r\n            if (userLike===true){\r\n                setLikes(likes - 1)\r\n                setUserLike(false)\r\n            }else{\r\n                setLikes(tweet.likes + 1)\r\n                setUserLike(true)\r\n            }\r\n            \r\n        }\r\n    }\r\n    const display = action.type === 'likes' ? `${likes} ${actionDisplay}` : actionDisplay\r\n    return (\r\n            <button className={className} onClick={handleClick}>{display}</button> \r\n    )\r\n}","export function LoadTweets(callback) {\r\n    const xhr = new XMLHttpRequest()\r\n    const method = 'GET' // 'POST'\r\n    const url = 'http://127.0.0.1:8000/api/tweets/'\r\n    const responseType = 'json'\r\n\r\n    xhr.responseType = responseType\r\n    xhr.open(method, url)\r\n    xhr.onload = function () {\r\n        callback(xhr.response, xhr.status)\r\n    }\r\n    xhr.onerror = (e) => {\r\n        console.log(e)\r\n        callback({ 'message': 'The request was an error' }, 400)\r\n    }\r\n    xhr.send()\r\n}\r\n\r\n\r\n\r\n","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport { TweetsComponents} from './tweets'\n\n\n\nfunction App() {\n  \n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <p>\n          Edit <code>src/App.js</code> and save to reload.\n        </p>\n        <div>\n          <TweetsComponents/>\n        </div>\n        <a\n          className=\"App-link\"\n          href=\"https://reactjs.org\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Learn React\n        </a>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport {TweetsComponents} from './tweets'\nimport * as serviceWorker from './serviceWorker';\n\n\nconst appEl = document.getElementById('root')\nif(appEl){\n  ReactDOM.render(\n    <React.StrictMode>\n      <App />\n    </React.StrictMode>,\n    appEl\n  );\n}\n\nconst twitterEl = document.getElementById('twitter-el')\nif(twitterEl){\n  ReactDOM.render(\n    <React.StrictMode>\n      <TweetsComponents />\n    </React.StrictMode>,\n    twitterEl\n  );\n}\n\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}